// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  password      String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  aliasId       String?   @unique @map(name: "alias_id")
  accounts      Account[]
  sessions      Session[]
  seat_reviews  SeatReview[]
  bookmarks     Bookmark[]
  favorites     Favorite[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Prefecture {
  id        Int       @id @default(autoincrement())
  region_id Int
  name      String
  name_kana   String
  createdAt DateTime  @default(now()) @map(name: "created_at")
  region   Region     @relation(fields: [region_id], references: [id])
  theaters Theater[]

  @@map("prefectures")
}

model Region {
  id         Int     @id @default(autoincrement())
  name       String
  name_kana  String
  prefecture Prefecture[]

  @@map("region")
}

model Theater {
  id            Int       @id @default(autoincrement())
  name          String
  address       String
  url           String?
  prefecture_id Int
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  screens   Screen[]
  prefecture Prefecture     @relation(fields: [prefecture_id], references: [id])
  favorites Favorite[]

  @@map("theaters")
}

model Screen {
  id         Int       @id @default(autoincrement())
  theater_id Int
  name       String
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @updatedAt @map(name: "updated_at")
  theaters   Theater   @relation(fields: [theater_id], references: [id])
  seats      Seats[]

  @@map("screens")
}

model Seats {
  id             Int @id @default(autoincrement())
  screen_id      Int @map(name: "screen_id")
  row            String
  column         Int
  screen         Screen @relation(fields: [screen_id], references: [id])
  seat_reviews   SeatReview[]

  @@map("seats")
}

model SeatReview {
  id        Int       @id @default(autoincrement())
  user_id   Int
  seat_id   Int
  seat_name String
  review    String
  rating    Int       @default(0)
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  seat      Seats     @relation(fields: [seat_id], references: [id])
  users     User      @relation(fields: [user_id], references: [id])
  bookmarks Bookmark[]

  @@map("seat_reviews")
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  user_id   Int
  review_id Int
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime  @updatedAt @map(name: "updated_at")
  user      User     @relation(fields: [user_id], references: [id])
  review    SeatReview @relation(fields: [review_id], references: [id])

  @@map("bookmarks")
  @@unique([user_id, review_id])
}

model Favorite {
  id         Int        @id @default(autoincrement())
  user_id    Int
  theater_id Int
  createdAt  DateTime   @default(now()) @map(name: "created_at")
  updatedAt  DateTime   @updatedAt @map(name: "updated_at")
  user       User       @relation(fields: [user_id], references: [id])
  theater    Theater    @relation(fields: [theater_id], references: [id])

  @@map("favorites")
  @@unique([user_id, theater_id])
}